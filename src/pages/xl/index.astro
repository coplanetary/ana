---
// Importing necessary components
import MainLayout from '@/layouts/MainLayout.astro';

// Importing necessary functions from Astro
import { SITE } from '@data/constants';

// Define variables for page content
const title: string = 'PrismXL';
const subTitle: string =
  'Upload an excel file and get a visual representation of the data.';

const pageTitle: string = `Products | ${SITE.title}`;
---

<MainLayout
  title={pageTitle}
  structuredData={{
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    '@id': 'https://nep.work/xl',
    url: 'https://nep.work/xl',
    name: 'Software Tools | CodeZen',
    description:
      'Explore the durability and precision of CodeZen tools, designed for both professionals and enthusiasts.',
    isPartOf: {
      '@type': 'WebSite',
      url: 'https://nep.work',
      name: 'CodeZen',
      description:
        'CodeZen offers top-tier software tools and expert automation services to meet all your project needs.',
    },
    inLanguage: 'en-US',
  }}
>
  <div
    class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div class="mb-4 flex items-center justify-between gap-8 sm:mb-8 md:mb-12">
      <div class="flex items-center gap-12">
        <h1
          class="text-balance text-2xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
        >
          {title}
        </h1>
        {
          subTitle && (
            <p class="hidden max-w-screen-sm text-pretty text-neutral-600 dark:text-neutral-400 md:block">
              {subTitle}
            </p>
          )
        }
      </div>
      <div id="excel-uploader">
        <input type="file" id="excel-file" accept=".xlsx, .xls, .xlsm" />
        <button id="upload-btn">Excel Upload</button>
      </div>
    </div>
  </div>
  <div id="sheet-menu">Sheet Menu</div>
  <div id="output"></div>
</MainLayout>

<style>
  #sheet-menu {
    margin-top: 20px;
  }
  .sheet-button {
    margin-right: 10px;
    padding: 5px 10px;
    cursor: pointer;
  }
  .sheet-data {
    border-collapse: collapse;
    margin-top: 20px;
  }
  .sheet-data th,
  .sheet-data td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  .sheet-data th {
    background-color: #f2f2f2;
  }
  .comment,
  .formula {
    font-size: 0.8em;
    margin-left: 5px;
    cursor: help;
  }
  .comment {
    color: green;
  }
  .formula {
    color: blue;
  }
  .formula-list {
    list-style-type: none;
    padding-left: 0;
  }
  .formula-list li {
    margin-bottom: 5px;
  }
</style>

<script>
  import * as XLSX from 'xlsx';

  interface CellData {
    value: any;
    comment?: string;
  }

  interface ParsedExcelData {
    sheetNames: string[];
    sheets: {
      [sheetName: string]: CellData[][];
    };
    formulas: {
      [sheetName: string]: {
        [coordinate: string]: string;
      };
    };
  }

  const fileInput = document.getElementById(
    'excel-file'
  ) as HTMLInputElement | null;
  const uploadBtn = document.getElementById(
    'upload-btn'
  ) as HTMLButtonElement | null;
  const sheetMenu = document.getElementById(
    'sheet-menu'
  ) as HTMLDivElement | null;
  const output = document.getElementById('output') as HTMLDivElement | null;

  let parsedData: ParsedExcelData | null = null;

  if (fileInput && uploadBtn && sheetMenu && output) {
    uploadBtn.addEventListener('click', () => {
      const file = fileInput.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e: ProgressEvent<FileReader>) => {
          if (e.target?.result) {
            const data = new Uint8Array(e.target.result as ArrayBuffer);
            const workbook = XLSX.read(data, { type: 'array' });

            parsedData = {
              sheetNames: workbook.SheetNames,
              sheets: {},
              formulas: {},
            };

            workbook.SheetNames.forEach((sheetName) => {
              const sheet = workbook.Sheets[sheetName];
              const range = XLSX.utils.decode_range(sheet['!ref'] || 'A1');
              const sheetData: CellData[][] = [];
              parsedData!.formulas[sheetName] = {};

              for (let R = range.s.r; R <= range.e.r; ++R) {
                const row: CellData[] = [];
                for (let C = range.s.c; C <= range.e.c; ++C) {
                  const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });
                  const cell = sheet[cellAddress];
                  const cellData: CellData = {
                    value: cell ? cell.v : undefined,
                  };

                  if (cell && cell.f) {
                    parsedData!.formulas[sheetName][cellAddress] = cell.f;
                  }

                  if (cell && cell.c && cell.c[0]) {
                    cellData.comment = cell.c[0].t;
                  }

                  row.push(cellData);
                }
                sheetData.push(row);
              }

              parsedData!.sheets[sheetName] = sheetData;
            });

            displaySheetMenu();
          }
        };
        reader.readAsArrayBuffer(file);
      } else {
        output.textContent = 'Please select a file';
      }
    });
  } else {
    console.error('One or more required elements not found');
  }

  function displaySheetMenu() {
    if (sheetMenu && parsedData) {
      sheetMenu.innerHTML = '';
      parsedData.sheetNames.forEach((sheetName) => {
        const button = document.createElement('button');
        button.textContent = sheetName;
        button.classList.add('sheet-button');
        button.addEventListener('click', () =>
          displaySheetDataAsTable(sheetName)
        );
        sheetMenu.appendChild(button);
      });
    }
  }

  function displaySheetData(sheetName: string) {
    if (output && parsedData) {
      const sheetData = parsedData.sheets[sheetName];
      const formulas = parsedData.formulas[sheetName];
      const displayData = {
        values: sheetData,
        formulas: formulas,
      };
      output.textContent = JSON.stringify(displayData, null, 2);
    }
  }

  function displaySheetDataAsTable(sheetName: string) {
    if (output && parsedData) {
      const sheetData = parsedData.sheets[sheetName];
      const formulas = parsedData.formulas[sheetName];

      // Create table for sheet data
      let tableHtml = '<h2>' + sheetName + '</h2>';
      tableHtml += '<table class="sheet-data">';

      // Table headers (A, B, C, ...)
      tableHtml += '<tr><th></th>';
      if (sheetData && sheetData[0]) {
        for (let i = 0; i < sheetData[0].length; i++) {
          tableHtml += '<th>' + String.fromCharCode(65 + i) + '</th>'; // A, B, C, ...
        }
        tableHtml += '</tr>';
      }

      // Table rows
      sheetData?.forEach((row, rowIndex) => {
        tableHtml += '<tr>';
        tableHtml += '<th>' + (rowIndex + 1) + '</th>'; // Row numbers
        row.forEach((cell, colIndex) => {
          const cellAddress =
            String.fromCharCode(65 + colIndex) + (rowIndex + 1);
          let cellContent = cell.value !== undefined ? cell.value : '';
          if (cell.comment) {
            cellContent +=
              '<span class="comment" title="' + cell.comment + '">üìù</span>';
          }
          if (formulas && formulas[cellAddress]) {
            cellContent +=
              '<span class="formula" title="' +
              formulas[cellAddress] +
              '">fx</span>';
          }
          tableHtml += '<td>' + cellContent + '</td>';
        });
        tableHtml += '</tr>';
      });

      tableHtml += '</table>';

      // Display formulas
      tableHtml += '<h3>Formulas</h3>';
      tableHtml += '<ul class="formula-list">';
      for (const [cellAddress, formula] of Object.entries(formulas || {})) {
        tableHtml +=
          '<li><strong>' + cellAddress + ':</strong> ' + formula + '</li>';
      }
      tableHtml += '</ul>';

      output.innerHTML = tableHtml;
    }
  }
</script>
